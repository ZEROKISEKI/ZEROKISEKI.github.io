{"pages":[{"title":"404","text":"","path":"404/index.html","date":"12-30","excerpt":""},{"title":"关于我","text":"标签: ACG控 | falcom(法老控) | 幼刀控柚子控 | 八月控 | 代码控 狡兔三窟, 换过几次blog, 最终在godday买了个.moe域名新的blog, 新的开始。","path":"about/index.html","date":"12-30","excerpt":""},{"title":"分类","text":"","path":"categories/index.html","date":"12-30","excerpt":""},{"title":"留言板","text":"有什么问题或想说的可以在这里讲哦~","path":"message/index.html","date":"12-30","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"12-30","excerpt":""},{"title":"标签","text":"","path":"tags/index.html","date":"12-30","excerpt":""}],"posts":[{"title":"基于Vue和Go的桌面端管理star应用","text":"这是一款基于Vue2和Golang的跨平台桌面端管理Star项目应用 前言:自己star的repo已经有100多个了, 有一天自己翻了一下列表, 想起来有一堆东西自己也不知道为什么当初star了…(应该是跟风大佬2333), 不过, 我个人认为, 一般在github上star别人的项目无非有以下几点: 这个项目在当前或者之后的项目中用到, star了以防自己以后忘记找不到(比如前端经常用到的一堆npm包那种) 要对这个项目的源码实现等进行研究细读(比如Vue, React之类的) 实用型项目(比如SS, lantern, 还有一些开车项目之类的…) 开源书籍文档之类的 其他原因, 比如出于对作者的鼓励, 或者就是跟风大佬star, 或者就是认识的人互粉这样的… 至于fork别人的项目, 一般就是你要进行一些对应的修改, 然后将修改PR到原项目中, 才是进行fork的, 这个倒没有必要细究了 我star项目的原因主要是前面三种, 但是star的一多自己也给忘了, 感觉这样不好, 于是想写一个方便自己管理star项目的客户端 正好自己没怎么写过桌面端应用, 也算是一次实践练习了, 项目地址https://github.com/ZEROKISEKI/starsManager/ 技术选用:桌面web化的一般可以用electron作为支持, 而前端方面稍微会写一点的就是vue, 那么有一个对应的支持electron-vue, 但是一般我们知道, 与系统API的交互由electron提供的API或者是有node.js去搞, 然后通过ipc之类的进行消息传递, 而由于最近是入门了golang, 所以在想能不能用前端代码去写用户表现, 而用golang作为系统API交互支持, 然后就找到了go-astilectron这个项目: Thanks to go-astilectron build cross platform GUI apps with GO and HTML/JS/CSS. It is the official GO bindings of astilectron and is powered by Electron. Go和Javascript可以通过sendMessage和OnMessage等接口进行消息的传递, 接下来是前端的选择, 如下所示, 其中parcel, vuetify, pouchdb都是第一次使用: Vue全家桶系列: Vue2 + Vue-router + Vuex + Vue-i18n前端模块打包构建: parcelUI框架: Vuetify(一款渐进式Material Design框架)前端数据库: Pouchdb网络请求: axios代码高亮和markdown渲染: github-markdown-css(自己造轮子不如用别人的轮子系列) 项目构建:首先你得安装了Golang, 并且设置好了$GOROOT和$GOPATH等变量, 如果没有配置过, 那么可以参考build-web-application-with-golang教程配置 如果上面的部分已经配置好了, 那么接下来要安装go-astilectron相关依赖: $ go get -u github.com/asticode/go-astilectron $ go get -u github.com/asticode/go-astilectron-bundler/... $ go get github.com/ZEROKISEKI/go-astilectron-bootstrap 在天朝的话, 上面get的过程八成会遇到这个错误 unrecognized import path &quot;golang.org/x/ ...&quot; 关于这个错误, 如果不能翻墙的话, 可以用golang的github镜像库去解决: $ mkdir -p $GOPATH/src/golang.org/x $ cd $GOPATH/src/golang.org/x $ git clone https://github.com/golang/crypto.git $ git clone https://github.com/golang/net.git $ git clone https://github.com/golang/sys.git git clone完之后可以重新go get, 应该就可以了, 此时可以通过bundler命令进行桌面可执行文件生成, 但是我们要先进行前端部分的build, 如果你没有安装parcel, 那么先全局进行安装parcel: yarn global add parcel-bundler or npm install parcel-bundler -g 进行build: $ cd src $ yarn or npm install $ npm run build 接下来可以可以bundler了: $ cd .. $ astilectron-bundler -v 上面那一步会去下载astlectron和electron, 天朝的话八成又会出问题了, 就是download没速度或者过于缓慢导致failed, 针对这点, 可能这样: 首先, 在当前项目建立一个文件夹, 比如cache_astilectron_bundler, 然后在bundler.json中添加一行代码: “cache_path”: “cache_astilectron_bundler” 然后可以在https://github.com/electron/electron/releases?after=v1.8.2-beta.2找到对应你系统的electron 1.8.1的版本, 放在cache_astilectron_bundler中, 并且做以下更名: electron-windows-amd64-1.8.1.zip(windows系统) electron-darwin-amd64-1.8.1.zip(OSX系统) electron-linux-amd64-1.8.1.zip(linux系统) 在https://github.com/asticode/astilectron/releases下载astilectron的0.20.0版本, 同样放在cache_astilectron_bundler中, 更名为: astilectron-0.20.0.zip 当然, 如果你想在同一台pc同时bundler三个系统的版本, 那么要下三个对应版本的electron 1.8.1, 并且做上面的更名, 都放在cache_astilectron_bundler中, 然后在bundler.json中添加以下代码: &quot;environments&quot;: [ {&quot;arch&quot;: &quot;amd64&quot;, &quot;os&quot;: &quot;darwin&quot;}, {&quot;arch&quot;: &quot;amd64&quot;, &quot;os&quot;: &quot;linux&quot;}, {&quot;arch&quot;: &quot;amd64&quot;, &quot;os&quot;: &quot;windows&quot;} ], 接下来应该可以bundler生成对应的二进制可执行文件了.默认生成地址是在当前项目的output文件夹中 项目演示:登录可以选择英文或者中文: 使用OAuth登录后, 可以看到你已经starred的repo的分类(按language): 代码文件和markdown文件均进行了渲染, 并且写了一个directive, 防止无法加载如./xxx,../xxx,#xxx这种url地址: 研究了octotree的部分源码, 自己也写了个可以查看项目代码树的组件: 自定义分类: 离线环境下可以查看之前加载过的文件: 后记:第一次使用parcel, 号称零配置构建真不是盖的, 但是在使用的过程还是出现了问题, 主要是vuetify.css/vuetify.min.css中有些样式使用了诸如display: -webkit-box; -webkit-box-orient: vertical;的写法, 而这种方式无论是在autoprefixer还是压缩css的cssnano中都已废除, 会直接将这样的代码删除, 而parcel的build默认采用了cssnano, 不使用它的方法只能是--no-minify, 但是这样的话所有的文件都没有压缩, 打包出来的js文件有几m大小(不过还是用file路径, 所以没什么影响) go-astilectron加载file path文件进行github oauth, 主要是通过new一个地址为github oauth authorize的window, 然后监听webcontents.will.navigate和webcontents.get.redirect.request这两个事件, 将oauth返回的code去请求token, 再进行消息传递给主窗口, 主窗口再SendMessage给前端token, 就完成了oauth的过程, 然而go-astilectron没有这两个事件的支持, 于是提了个PR添加了这两个事件的支持, 顺带也写了个demo, 不过目前go-astilectron还是有很多未完善的东西, 所以后面会出现什么坑我也不是很清楚(如果遇到坑就补) 检测离线状态(主要是为了避免离线状态下还request的情况)一开始打算用的navigator.online, 但是这东西返回false的时候没问题, true的时候不一定是能上网的(比如你启用了VMware Network), 于是用go写了个与api.github.com进行tcp连接的dial, 进行离线状态检测, 在mac下无问题, 但是在windows下会出现cannot read Webcontents of undefined的问题, 这个问题还需修正 感觉每一次用新的东西都是踩坑的过程2333, 如果感兴趣的话, 欢迎star","path":"2018/04/23/StarsManager/","date":"04-23","excerpt":"这是一款基于Vue2和Golang的跨平台桌面端管理Star项目应用","preview":"http://myau.moe/2018/04/23/StarsManager/preview.jpg"},{"title":"强推hooksoft生肉吐槽","text":"hooksoft的游戏是出了名的日常甜死你向作品, 目前貌似只汉化了lovely quest和 Strawberry Nauts,鉴于目前抠脚的日语水平, hooksoft的作品比较简单, 所以就推了meltymoment和sugirly wish两部作品,感觉就是… 太tm长了日常系的作品居然能有那么长的文本, meltymoment光是一个普通的什么管理委员会都能吹出那么多文本, 选项又鬼多, 又是选择地点又是RTC什么的…, 推了すみれ线后就不想再玩了, 毕竟其他角色真没什么进线的欲望(其实第一次玩的时候乱选到了共通线就结束了233, 然后又重新开始, 快进下过共通线都要30+分钟, 你说游戏长不长….), 顺便一提, 个人线的hs应该有十次那样, 堪比拔作了吧 不过, 拿来消遣放松倒是不错的选择, 其他线还是到时再玩吧 然后就是sugirly wish了, 首先那个幼驯染基本跟meltymoment基本一样, 我怀疑她搞完sugirly wish后就穿越到meltymoment去了2333, 其他的感觉没什么萌点, 目前就妹线比较感兴趣(我不是妹控), 由于是生肉, 推得还是比较慢的, 目前还没推完, 不过感觉这作还是差不多吧, 日常搞笑废萌系, 估计推完短期内我都不怎么想碰废萌了2333, 最后附送两张ひな的图~","path":"2018/01/10/hooksoft/","date":"01-10","excerpt":"hooksoft的游戏是出了名的日常甜死你向作品, 目前貌似只汉化了lovely quest和 Strawberry Nauts,鉴于目前抠脚的日语水平, hooksoft的作品比较简单, 所以就推了meltymoment和sugirly wish两部作品,感觉就是…","preview":"http://p1r8dwfrm.bkt.clouddn.com/hooksoft/preview.jpg"},{"title":"即将到来的2018","text":"还有两天, 就是2018了, 我也即将毕业2017做了什么？ 没做什么, 就是正常的大学过程，跟同学，跟朋友，实习等等然后就是, 在2017，终于踏入了gal的坑里面了, 这一年约莫有玩了30多部gal吧(虽然大多数都是单线)感觉不用操作的游戏更适合我了, 其他的游戏，倒是愿意去看别人的直播我读的是计算机专业, 还是很庆幸读这个专业, 这个专业算是培养了我去折腾东西的”兴趣“… 关于接下来的2018关于工作:大学里面关于IT, 学的算是比较杂, 主要玩的是前端, 如你所见这个blog的主题是自己写的, 玩过逆向工程, 玩过python等等之前自己的想法是主搞前端, 做一个前端程序员, 学其他的, 只是为了工作时能更方便罢了 不过, 去实习之后, 虽然做得不错, 但是发现我可能并不想当一名程序员, 虽然已经拿到了一些offer, 但是都不是很想去, 在家里人的劝说下, 去参加了2018的国考有点可笑, 说自己喜欢代码, 但又不想当程序员, 我自己都觉得矛盾, 可能就像《白马啸西风》李文秀的那句话那样: “那些都是很好很好的，可我偏偏不喜欢” 而考公选的是自己居住的城市(潮汕某三或四线城市), 一则求稳, 二则不想要那么快的生活节奏, 对小城市也没什么排斥感, 缓慢的生活节奏更适合我(至少目前是这么想) 关于兴趣和爱好:开始对很多领域感兴趣, 自从alphago横空出世以来, 开始掀起机器学习的热潮, 目前有一个很热门的东西叫tensorflow, 关于这方面挺感兴趣, 想找个时间学一下已经有相当长的时间没玩过逆向工程了, 会重新拾起这一方面的东西重新拾起python, 学习golang认真去学下日语, 毕竟汉化的gal已经满足不了我了2333, 顺便也当为研究下汉化做个铺垫 …再说下去我怕到时会不想再看这篇文章了 总之, 提前祝愿一下2018了。","path":"2017/12/30/helloWorld/","date":"12-30","excerpt":"还有两天, 就是2018了, 我也即将毕业2017做了什么？ 没做什么, 就是正常的大学过程，跟同学，跟朋友，实习等等然后就是, 在2017，终于踏入了gal的坑里面了, 这一年约莫有玩了30多部gal吧(虽然大多数都是单线)感觉不用操作的游戏更适合我了, 其他的游戏，倒是愿意去看别人的直播我读的是计算机专业, 还是很庆幸读这个专业, 这个专业算是培养了我去折腾东西的”兴趣“…","preview":"https://myau.moe/2017/12/30/helloWorld/preview.jpg"}]}